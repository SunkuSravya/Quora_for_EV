{"version":3,"sources":["firebase.js","component/auth/CST-logo.png","component/auth/Login.js","features/questionSlice.js","features/userSlice.js","component/Post.js","component/QuoraBox.js","component/Feeds.js","component/Navbar.js","component/Quora.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","GoogleAuthProvider","firestore","Login","useState","email","setEmail","password","setPassword","className","src","logo","alt","value","onChange","e","target","type","placeholder","onClick","preventDefault","signInWithEmailAndPassword","then","console","log","catch","alert","message","createUserWithEmailAndPassword","questionSlice","createSlice","name","initialState","questionId","questionName","reducers","setQuestionInfo","state","action","payload","actions","selectQuestionId","question","selectQuestionName","userSlice","user","login","logout","selectUser","Modal","setAppElement","Post","Id","image","timestamp","quoraUser","useSelector","openModal","setOpenModal","dispatch","useDispatch","answer","setAnswer","getAnswer","setGetAnswer","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","id","answers","data","Avatar","photo","displayName","Date","toDate","toLocaleString","isOpen","onRequestClose","shouldCloseOnOverlayClick","style","overlay","width","height","backgroundColor","zIndex","top","left","marginTop","marginLeft","required","add","FieldValue","serverTimestamp","position","paddingBottom","color","fontSize","display","right","marginBottom","QuoraBox","Feeds","posts","setPosts","imageUrl","Navbar","input","setInput","inputUrl","setInputUrl","contactModal","setContactModal","inputC","setInputC","Button","signOut","ExpandMore","Input","Link","window","feedback","Quora","App","onAuthStateChanged","authUser","uid","photoURL","store","configureStore","reducer","userReducer","questionReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12dffe13.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBNjkKn_H2WGNruerWg0NH5DUIGC_N3mdM\",\r\n    authDomain: \"quora-ev-f1f29.firebaseapp.com\",\r\n    projectId: \"quora-ev-f1f29\",\r\n    storageBucket: \"quora-ev-f1f29.appspot.com\",\r\n    messagingSenderId: \"472308161650\",\r\n    appId: \"1:472308161650:web:851424afb7acb4bcb036eb\",\r\n    measurementId: \"G-EWZYW3XSKX\"\r\n  };\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig)\r\n  const auth=firebase.auth()\r\n   const provider=new firebase.auth.GoogleAuthProvider()\r\n\r\n  const db=firebaseApp.firestore()\r\n\r\n  export {auth,provider}\r\n  export default db","export default __webpack_public_path__ + \"static/media/CST-logo.cbfeb205.png\";","import React, { useState } from 'react';\r\nimport './Login.css';\r\nimport {auth} from '../../firebase';\r\nimport logo from './CST-logo.png'\r\n\r\nfunction Login() {\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    auth.signInWithEmailAndPassword(email, password).then((auth) => {\r\n      console.log(auth);\r\n    }).catch((e) => alert(e.message));\r\n    \r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n  }\r\n  const handleRegister = (e) => {\r\n    e.preventDefault();\r\n    auth.createUserWithEmailAndPassword(email, password).then((auth) => {\r\n        if (auth) {\r\n          console.log(auth);\r\n        }\r\n      }).catch((e) => alert(e.message));\r\n\r\n      setEmail(\"\");\r\n      setPassword(\"\");\r\n  };\r\n\r\n    return (\r\n        <div className=\"login\">\r\n      <div className=\"login__container\">\r\n        <div className=\"login__logo\">\r\n          <img\r\n            src={logo}\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div className=\"login__desc\">\r\n          <p>A Place to Share knowledge and better understand the world</p>\r\n          <h3>Quora For EV</h3>\r\n        </div>\r\n        <div className=\"login__auth\">\r\n          <div className=\"login__emailPass\">\r\n            <div className=\"login__label\">\r\n              <h4>Login</h4>\r\n            </div>\r\n            <div className=\"login__inputFields\">\r\n              <div className=\"login__inputField\">\r\n                <input\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                  type=\"text\"\r\n                  placeholder=\"Email\"\r\n                />\r\n              </div>\r\n              <div className=\"login__inputField\">\r\n                <input\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"login__forgButt\">\r\n              <small>Forgot Password?</small>\r\n              <button type='submit' onClick={handleLogin}>Login</button>\r\n              <button className=\"reg_btn\" onClick={handleRegister}>Register</button>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n        <div className=\"login__footer\">\r\n          <p>About</p>\r\n          <p>Terms</p>\r\n          <p>Contact</p>\r\n          <p>&copy; Quora For EV Inc. 2021</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Login","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const questionSlice = createSlice({\r\n  name: \"question\",\r\n  initialState: {\r\n    questionId: null,\r\n    questionName: null\r\n  },\r\n  reducers: {\r\n    setQuestionInfo : (state, action) => {\r\n        state.questionId = action.payload.questionId\r\n        state.questionName = action.payload.questionName\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setQuestionInfo } = questionSlice.actions;\r\n\r\nexport const selectQuestionId = (state) => state.question.questionId;\r\nexport const selectQuestionName = (state) => state.question.questionName;\r\n\r\nexport default questionSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;","\r\nimport React, { useEffect, useState } from 'react'\r\nimport '../css/Post.css'\r\nimport  Avatar  from '@material-ui/core/Avatar'\r\nimport  ArrowDownwardOutlinedIcon from  '@material-ui/icons/ArrowDownwardOutlined'\r\nimport  ArrowUpwardOutlinedIcon from  '@material-ui/icons/ArrowUpwardOutlined'\r\nimport  RepeatOutlinedIcon  from '@material-ui/icons/RepeatOutlined'\r\nimport  ChatBubbleOutlineOutlinedIcon  from '@material-ui/icons/ChatBubbleOutlineOutlined'\r\nimport ShareOutlinedIcon from '@material-ui/icons/ShareOutlined'\r\nimport  MoreHorizOutlinedIcon from '@material-ui/icons/MoreHorizOutlined'\r\nimport Modal from 'react-modal'\r\nimport '../css/Navbar.css'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectQuestionId, selectQuestionName, setQuestionInfo } from '../features/questionSlice'\r\nimport db from '../firebase'\r\nimport { selectUser } from '../features/userSlice'\r\nimport firebase from 'firebase'\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction Post( {Id, question, image, timestamp, quoraUser} ) {\r\n\r\n    const user = useSelector(selectUser)\r\n    const [openModal, setOpenModal] = useState(false)\r\n   const dispatch= useDispatch()\r\n    const questionId = useSelector(selectQuestionId)\r\n    const questionName = useSelector(selectQuestionName)\r\n    const [answer, setAnswer] =useState(\"\")\r\n  \r\n    const [getAnswer, setGetAnswer]=useState([])\r\n\r\n    useEffect(() => {\r\n        if(questionId){\r\n            db.collection('questions').doc(questionId).collection('answer').orderBy(\"timestamp\", 'desc').onSnapshot(snapshot => setGetAnswer(snapshot.docs.map((doc)=> ({\r\n                id: doc.id,\r\n                answers:doc.data()\r\n            }))))\r\n        }\r\n    })\r\n\r\n\r\n    const handleAnswer = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(questionId){\r\n            db.collection('questions').doc(questionId).collection('answer').add({\r\n                questionId: questionId,\r\n                timestamp:  firebase.firestore.FieldValue.serverTimestamp(),\r\n                answer: answer,\r\n                user: user\r\n            })\r\n            console.log(questionId, questionName)\r\n            setAnswer(\"\")\r\n            setOpenModal(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"post\"\r\n        onClick = {() => dispatch(setQuestionInfo({\r\n            questionId: Id,\r\n            questionName: question\r\n        }))}\r\n        >\r\n             <div className=\"post_info\">\r\n                 <Avatar\r\n                 src = {quoraUser.photo}\r\n                 />\r\n                 <h5>{quoraUser.displayName ? quoraUser.displayName : quoraUser.email}</h5>\r\n                 <small>{new Date(timestamp?.toDate()).toLocaleString()}</small>\r\n             </div>\r\n             <div className=\"post_body\">\r\n                 <div className=\"post_question\">\r\n                     <p>{question}</p>\r\n                     <button onClick = {() => setOpenModal(true)} \r\n                      className=\"post_btnAnswer\">Answer</button>\r\n                     <Modal\r\n                 isOpen = {openModal}\r\n                 onRequestClose = {() => setOpenModal(false)}\r\n                 shouldCloseOnOverlayClick={false}\r\n                 style={{\r\n                  overlay:{\r\n                      width:700,\r\n                      height:600,\r\n                      backgroundColor:\"rgba(0,0,0,0.8)\",\r\n                      zIndex:\"1000\",\r\n                      top:\"50%\",\r\n                      left:\"50%\",\r\n                      marginTop:\"-300px\",\r\n                      marginLeft:\"-350px\",\r\n                  },\r\n              }}\r\n                 >\r\n                   <div className=\"modal_question\">\r\n                    <h1>{question}</h1>\r\n                    <p>\r\n                        asked by&nbsp; <span className=\"name\">{quoraUser.displayName ? quoraUser.displayName : quoraUser.email} </span> {\"\"}\r\n                        &nbsp;on&nbsp; <span className=\"name\">{new Date(timestamp?.toDate()).toLocaleString()}</span>\r\n                    </p>\r\n                  </div> \r\n                     <div className=\"modal_answer\">\r\n                         <textarea\r\n                         required\r\n                         value ={answer}\r\n                         onChange = {(e) => setAnswer(e.target.value)}\r\n                         placeholder=\"Enter Your Answer\"\r\n                         type=\"text\" />\r\n                     </div> \r\n                     <div className=\"modal_button\">\r\n                     <button onClick={() => setOpenModal(false)} className=\"cancle\">cancel</button>\r\n                     <button onClick= {handleAnswer} type=\"submit\" className=\"add\">Add Answer</button>\r\n                     </div>\r\n                 </Modal>\r\n                 </div>\r\n                 <div className='post_answer'>\r\n                  {getAnswer.map(({ id, answers }) => (\r\n                    <p key={id} style={{ position: \"relative\", paddingBottom: \"5px\" }}>\r\n                      {Id === answers.questionId ? (\r\n                        <span><br />\r\n                          {answers.answer}\r\n                          <br />\r\n                          <span style={{position: \"absolute\", color: \"gray\", fontSize: \"small\", display: \"flex\", right: \"0px\", marginBottom: \"10px\",}}>\r\n                            <span style={{ color: \"#b92b27\" }}>answered by &nbsp;\r\n                              {answers.user.displayName ? answers.user.displayName : answers.user.email}{\" \"}\r\n                              on{\" \"}\r\n                              {new Date(answers.timestamp?.toDate()).toLocaleString()}\r\n                            </span><br/>\r\n                          </span>\r\n                        </span>\r\n                      ) : ( \"\" )}\r\n                    </p>\r\n                  ))}\r\n                </div><br/>\r\n                 <img src={image}\r\n                 alt=\"\" />\r\n             </div>  \r\n             <div className=\"post_footer\">\r\n                 <div className=\"post_footerAction\">\r\n                     <ArrowUpwardOutlinedIcon />\r\n                     <ArrowDownwardOutlinedIcon />\r\n                 </div>\r\n\r\n                 <RepeatOutlinedIcon />\r\n                  <ChatBubbleOutlineOutlinedIcon /> \r\n                 <div className=\"post_footerLeft\">\r\n                     <ShareOutlinedIcon />\r\n                     <MoreHorizOutlinedIcon />\r\n\r\n                 </div>\r\n\r\n             </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import  Avatar  from '@material-ui/core/Avatar'\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport '../css/QuoraBox.css'\r\nimport { selectUser } from '../features/userSlice'\r\nfunction QuoraBox() {\r\n    const user=useSelector(selectUser)\r\n    return (\r\n        <div className=\"quoraBox\">\r\n           <div className=\"quoraBox_info\">\r\n               <Avatar src={user.photo}/>\r\n               <h5>{user.email}</h5>\r\n           </div>\r\n           <div className=\"quoraBox_quora\">\r\n               <p>What is your question or link?</p>\r\n           </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuoraBox\r\n","import React, { useEffect, useState } from 'react'\r\nimport '../css/Feeds.css'\r\nimport db from '../firebase'\r\nimport Post from './Post'\r\nimport QuoraBox from './QuoraBox'\r\n\r\nfunction Feeds() {\r\n    const [posts, setPosts]=useState([])\r\n\r\n    useEffect(() => {\r\n        db.collection('questions').orderBy('timestamp', \"desc\").onSnapshot(snapshot => setPosts(snapshot.docs.map((docs)=>(({\r\n            id:docs.id,\r\n            question:docs.data()\r\n        })) )))\r\n    }, [])\r\n    return (\r\n        <div className=\"feed\">\r\n            <QuoraBox />\r\n            {\r\n                posts.map(({id, question}) => (\r\n                    <Post\r\n                    key = {id}\r\n                    Id = {id}\r\n                    image = {question.imageUrl}\r\n                    question = {question.question}\r\n                    timestamp = {question.timestamp}\r\n                    quoraUser = {question.user}\r\n                    />\r\n                ))\r\n            }\r\n            \r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feeds\r\n","import React, { useState } from 'react';\r\nimport HomeIcon from  '@material-ui/icons/Home';\r\n// import  FeaturedPlayListOutlinedIcon  from '@material-ui/icons/FeaturedPlayListOutlined';\r\n// import  AssignmentTurnedInOutlinedIcon  from '@material-ui/icons/AssignmentTurnedInOutlined';\r\nimport  PeopleAltOutlinedIcon  from '@material-ui/icons/PeopleAltOutlined';\r\n// import  NotificationsOutlinedIcon  from '@material-ui/icons/NotificationsOutlined';\r\nimport  SearchIcon from '@material-ui/icons/Search';\r\nimport  Avatar from '@material-ui/core/Avatar';\r\n// import  LanguageIcon  from '@material-ui/icons/Language';\r\nimport  Button  from '@material-ui/core/Button';\r\nimport '../css/Navbar.css';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport db, { auth } from '../firebase';\r\nimport Modal from 'react-modal'\r\nimport firebase from 'firebase'\r\nimport logo from './auth/CST-logo.png'\r\n\r\nimport { ExpandMore, Link } from '@material-ui/icons';\r\nimport { Input } from '@material-ui/core';\r\n\r\nfunction Navbar() {\r\n  const user=useSelector(selectUser)\r\n  const [openModal, setOpenModal]=useState(false)\r\n  const [input, setInput] =useState(\"\")\r\n  const [inputUrl, setInputUrl]=useState(\"\")\r\n  const [contactModal, setContactModal]=useState(false)\r\n  const [inputC, setInputC] = useState(\"\")\r\n\r\n\r\n   \r\n\r\n  const handleQuestion = (e) => {\r\n    e.preventDefault()\r\n\r\n    setOpenModal(false)\r\n    db.collection('questions').add({\r\n      question: input,\r\n      imageUrl: inputUrl,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      user: user \r\n    });\r\n    setInput(\"\")\r\n    setInputUrl(\"\")\r\n  };\r\n\r\n\r\n\r\n  const handleContact = (e) => {\r\n    e.preventDefault()\r\n\r\n    setContactModal(false)\r\n\r\n    if(inputC===\"\"){\r\n      window.alert(\"Please enter some feedback...\");\r\n            setContactModal(true);\r\n    }\r\n    else{\r\n\r\n    db.collection('contact').add({\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      user: user,\r\n      feedback: inputC,\r\n    });\r\n    setInputC(\"\")\r\n    window.alert(\"Query sent! Thank you!\");\r\n  }\r\n    \r\n  };\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n  \r\n    return (\r\n        <div className='qHeader'>\r\n            \r\n            <div className=\"qHeader_logo\">\r\n                <img\r\n                src={logo}\r\n                alt=\"\"\r\n                />\r\n\r\n            </div>\r\n\r\n            <div className=\"qHeader_icons\">\r\n                <div className=\"qHeader_icon\">\r\n                  <HomeIcon />\r\n                </div>\r\n                \r\n            </div>\r\n            <div className=\"qHeader_input\">\r\n              \r\n                <SearchIcon />\r\n                <input type=\"text\" placeholder=\"Search Quora\"  />\r\n             </div>\r\n             <div className=\"qHeader_Rem\">\r\n                 \r\n                <Button onClick ={() => setOpenModal(true)}>Add Question</Button>\r\n                <Button onClick ={() => setContactModal(true)}>Contact Us</Button>\r\n                <Button onClick={() => auth.signOut()}>Logout</Button> \r\n                 <Modal\r\n                 isOpen = {openModal}\r\n                 onRequestClose = {() => setOpenModal(false)}\r\n                 shouldCloseOnOverlayClick={false}\r\n                 style={{\r\n                  overlay:{\r\n                      width:700,\r\n                      height:600,\r\n                      backgroundColor:\"rgba(0,0,0,0.8)\",\r\n                      zIndex:\"1000\",\r\n                      top:\"50%\",\r\n                      left:\"50%\",\r\n                      marginTop:\"-300px\",\r\n                      marginLeft:\"-350px\",\r\n                  },\r\n              }}\r\n                 >\r\n                   <div className=\"modal_title\">\r\n                     <h5>Add Question</h5>\r\n                     <h5>Share Link</h5>\r\n                   </div> \r\n                     <div className=\"modal_info\">\r\n                         <Avatar \r\n                         className=\"avatar\"\r\n                         src={user.photo}\r\n                         />\r\n                         <p>{user.displayName ? user.displayName : user.email} &nbsp;asked&nbsp; </p>\r\n                         <div className=\"modal_scope\">\r\n                           <PeopleAltOutlinedIcon />\r\n                           <p>Public</p>\r\n                           <ExpandMore />\r\n                         </div>\r\n                     </div>\r\n                     <div className=\"modal_field\">\r\n                       <Input \r\n                       required\r\n                       value ={input}\r\n                       onChange= {(e) => setInput(e.target.value)}\r\n                       type = \"text\"\r\n                       placeholder=\"Enter your question here...\"\r\n                       />\r\n                     \r\n                     <div className=\"modal_fieldLink\">\r\n                       <Link />\r\n                       <input \r\n                        value ={inputUrl}\r\n                        onChange= {(e) => setInputUrl(e.target.value)}\r\n                       type = \"text\"\r\n                       placeholder=\"Optional: include a link that gives context\"\r\n                       />\r\n                     </div>\r\n                     </div> \r\n                     <div className=\"modal_buttons\">\r\n                     <button onClick={() => setOpenModal(false)} className=\"cancle\">close</button>\r\n                     <button onClick = {handleQuestion} type=\"submit\" className=\"add\">Add Question</button>\r\n                     </div>\r\n                     \r\n\r\n                 </Modal>\r\n\r\n\r\n\r\n\r\n                 <Modal\r\n                 isOpen = {contactModal}\r\n                 onRequestClose = {() => setContactModal(false)}\r\n                 shouldCloseOnOverlayClick={false}\r\n                 style={{\r\n                  overlay:{\r\n                      width:700,\r\n                      height:600,\r\n                      backgroundColor:\"rgba(0,0,0,0.8)\",\r\n                      zIndex:\"1000\",\r\n                      top:\"50%\",\r\n                      left:\"50%\",\r\n                      marginTop:\"-300px\",\r\n                      marginLeft:\"-350px\",\r\n                  },\r\n              }}\r\n                 >\r\n                   <div className=\"modal_title\">\r\n                     <h5>Contact Us</h5> \r\n                   </div>\r\n\r\n                    <div className=\"contact_info\">  \r\n                     <p>For all enquiries, please contact us using the form below.</p>\r\n                    </div>\r\n\r\n                     <div className=\"modal_info\">\r\n                         <Avatar \r\n                         className=\"avatar\"\r\n                         src={user.photo}\r\n                         />\r\n                         <p>{user.displayName ? user.displayName : user.email}  </p>\r\n                         \r\n                     </div>\r\n                     <div className=\"modal_field\">\r\n                       <Input \r\n                       required\r\n                       value ={inputC}\r\n                       onChange= {(e) => setInputC(e.target.value)}\r\n                       type = \"text\"\r\n                       placeholder=\"How can we help you?\"\r\n                       />\r\n                     \r\n                    \r\n                     </div> \r\n                     \r\n                     <div className=\"modal_buttons\">\r\n                     <button onClick={() => setContactModal(false)} className=\"cancle\">close</button>\r\n                     <button onClick = {handleContact} type=\"submit\" className=\"add\">Submit</button>\r\n                     </div>\r\n                     \r\n\r\n                  \r\n\r\n                 </Modal>\r\n                     \r\n             </div>\r\n            \r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport '../css/Quora.css';\r\nimport Feeds from './Feeds';\r\n\r\nimport Navbar from './Navbar';\r\n\r\n\r\nfunction Quora() {\r\n    return (\r\n        <div className=\"quora\">\r\n            \r\n         <Navbar /> \r\n            <div className=\"quora_content\">\r\n              <Feeds />\r\n             </div>  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quora;\r\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\nimport Login from './component/auth/Login';\nimport Quora from './component/Quora';\nimport { login, logout, selectUser } from './features/userSlice';\nimport { auth } from './firebase';\n\n\nfunction App() {\n\n  const user=useSelector(selectUser)\n   const dispatch  = useDispatch()\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      if(authUser){\n        dispatch(login({\n          uid: authUser.uid,\n          photo: authUser.photoURL,\n          displayName: authUser.displayName,\n          email: authUser.email\n        }));\n        console.log(authUser);\n      } else {\n        dispatch(logout())\n      }\n    });\n  }, [dispatch]);\n  return (\n    <div className=\"App\">\n      {\n        user ? (<Quora />) : (<Login />)\n      }\n     \n    \n    </div>\n  \n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\nimport questionReducer from '../features/questionSlice'\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    question: questionReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}